var Boggle = function () {

  function createBoard() {
  
  var board = [];
      
  for(var i = 0; i < 13; i++){

    board[i] = [];
    
    for(var j = 0; j < 8; j++){
      
      var dec = Math.random();
      console.log(dec);
  
      if(0 < dec <= 0.11333){
        board[i].push("a");
      }
      else if(0.11333 < dec <= 0.22667){
        board[i].push("e");
      }
      else if(0.22667 < dec <= 0.34){
        board[i].push("o");
      }
      else if(0.34 < dec <= 0.40667){
        board[i].push("r");
      }
      else if(0.40667 < dec <= 0.47333){
        board[i].push("s");
      }
      else if(0.47333 < dec <= 0.54){
        board[i].push("t");
      }
      else if(0.54 < dec <= 0.62){
        board[i].push("i");
      }
      else if(0.62 < dec <= 0.6222){
        board[i].push("b");
      }
      else if(0.6222 < dec <= 0.6244){
        board[i].push("c");
      }
      else if(0.6244 < dec <= 0.6266){
        board[i].push("d");
      }
      else if(0.6266 < dec <= 0.6288){
        board[i].push("m");
      }
      else if(0.6288 < dec <= 0.63){
        board[i].push("p");
      }
      else if(0.63 < dec <= 0.72){
        board[i].push("u");
      }
      else if(0.72 < dec <= 0.78){
        board[i].push("g");
      }
      else if(0.78 < dec <= 0.84){
        board[i].push("n");
      }
      else if(0.84 < dec <= 0.852){
        board[i].push("f");
      }
      else if( 0.852 < dec <= 0.862){
        board[i].push("w");
      }
      else if( 0.862 < dec <= 0.876){
        board[i].push("v");
      }
      else if( 0.876 < dec <= 0.888){
        board[i].push("h");
      }
      else if( 0.888 < dec <= 0.9){
        board[i].push("y");
      }
      else if( 0.9 < dec <= 0.92){
        board[i].push("l");
      }
      else if( 0.92 < dec <= 0.94){
        board[i].push("k");
      }
      else if( 0.94 < dec <= 0.955){
        board[i].push("j");
      }
      else if( 0.955 < dec <= 0.97){
        board[i].push("x");
      }
      else if( 0.97 < dec <= 0.985){
        board[i].push("q");
      }
      else if( 0.985 < dec <= 1.0){
        board[i].push("z");
      }
    }
  }
  
  console.log(board);
}
createBoard();
  
  /**
   * Solves a Boggle board using the given trie as a dictionary.
   */
  var solve = function (boggle, trie) {
    var rows = boggle.getNumRows();
    var cols = boggle.getNumCols();

    var charStack = new Array();
    var words = new Array();

    var findWords = function (row, col, node) {
      if (visited[row][col]) return;
      if (!node || !node.has(boggle.charAt(row, col))) return;
      node = node.next(boggle.charAt(row, col));

      charStack.push(boggle.charAt(row, col));
      visited[row][col] = true;

      for (var dx = -1; dx <= 1; dx++) {
        var c = col + dx;
        if (c < 0 || c >= cols) continue;

        for (var dy = -1; dy <= 1; dy++) {
          var r = row + dy;
          if (r < 0 || r >= rows) continue;
          if (dx == 0 && dy == 0) continue;

          findWords(r, c, node);
        }
      }

      if (node.isEndOfWord) {
        var s = "";
        for (var i = 0; i < charStack.length; i++) {
          s = s + charStack[i];
        }
        words.push(s);
      }

      visited[row][col] = false;
      charStack.pop();
    };

    var visited = new Array(rows);
    for (var row = 0; row < rows; row++) {
      visited[row] = new Array(cols);
      for (var col = 0; col < cols; col++) {
        visited[row][col] = false;
      }
    }

    for (var r = 0; r < rows; r++) {
      for (var c = 0; c < cols; c++) {
        findWords(r, c, trie);
      }
    }

    return words;
  };

  return {
    createBoard: createBoard,
    solve: solve,
    Board: Board,
  };
}

var boggle = new Boggle();

function Trie () {
  var ALPHABET_SIZE = 26;
  var ASCII_OFFSET = 'A'.charCodeAt();

  this.children = null;
  this.isEndOfWord = false;

  this.contains = function (str) {
    var curNode = this;

    for (var i = 0; i < str.length; i++) {
      var idx = str.charCodeAt(i) - ASCII_OFFSET;
      if (curNode.children && curNode.children[idx]) {
        curNode = curNode.children[idx];
      } else {
        return false;
      }
    }

    return curNode.isEndOfWord;
  }

  this.has = function (ch) {
    if (this.children) {
      return this.children[ch.charCodeAt() - ASCII_OFFSET] != undefined;
    }
    return false;
  }

  this.next = function (ch) {
    if (this.children) {
      return this.children[ch.charCodeAt() - ASCII_OFFSET];
    }
    return undefined;
  }

  this.insert = function (str) {
    var curNode = this;

    for (var i = 0; i < str.length; i++) {
      var idx = str.charCodeAt(i) - ASCII_OFFSET;

      if (curNode.children == null) {
        curNode.children = new Array(ALPHABET_SIZE);
        curNode = curNode.children[idx] = new Trie();
      } else if (curNode.children[idx]) {
        curNode = curNode.children[idx];
      } else {
        curNode = curNode.children[idx] = new Trie();
      }
    }

    curNode.isEndOfWord = true;
    return curNode;
  }
}

var dict = new Trie

var trie = new Trie

$.get('data/length-up-to-7.txt')
.success(function (data) {
  var words = data.split('\n');
  for (var i = words.length - 1; i >= 0; i--) {
    dict.insert(words[i]);
  }

 
})
.error(function () {
});
